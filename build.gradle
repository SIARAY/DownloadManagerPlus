buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
        //classpath 'com.novoda:bintray-release:0.9.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
    
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/*
ext {
    ARTIFACT_ID = LIBRARY_ARTIFACT_ID as String
    VERSION_NAME = LIBRARY_VERSION_NAME as String
    VERSION_CODE = LIBRARY_VERSION_CODE as int

    DESCRIPTION = LIBRARY_DESCRIPTION as String

    SITE_URL = GITHUB_URL as String
    GIT_URL = LIBRARY_GIT_URL as String
    GROUP_NAME = GROUP as String
    COMPILE_SDK = COMPILE_SDK_VERSION as int
    BUILD_TOOLS = BUILD_TOOLS_VERSION as String

    MODULE_NAME = LIBRARY_ARTIFACT_ID as String

    LICENSE = LIBRARY_LICENSE as String

    DEVELOPER_ID = USER_NAME as String
    DEVELOPER_NAME = NAME as String
    DEVELOPER_EMAIL = EMAIL as String

    IS_UPLOADING = project.getGradle().startParameter.taskNames.any { it.contains('bintrayUpload') }
}

subprojects {
    group = GROUP_NAME
    version = VERSION_NAME

    if (IS_UPLOADING && project.name in MODULE_NAME) {
        println project.name
        apply plugin: 'maven'

        gradle.taskGraph.whenReady { taskGraph ->
            def pomTask = taskGraph.getAllTasks().find {
                it.path == ":$project.name:generatePomFileForReleasePublication"
            }
            if (pomTask == null) return;
            pomTask.doLast {
                file("build/publications/maven/pom-default.xml").delete()
                println 'Overriding pom-file to make sure we can sync to maven central!'
                pom {
                    //noinspection GroovyAssignabilityCheck
                    project {
                        name "$project.name"
                        artifactId ARTIFACT_ID
                        packaging project.name == 'compiler' ? 'jar' : 'aar'
                        description DESCRIPTION
                        url SITE_URL
                        version VERSION_NAME

                        scm {
                            url GIT_URL
                            connection GIT_URL
                            developerConnection GIT_URL
                        }

                        licenses {
                            license {
                                name LICENSE
                            }
                        }

                        developers {
                            developer {
                                id DEVELOPER_ID
                                name DEVELOPER_NAME
                                email DEVELOPER_EMAIL
                            }
                        }
                    }
                }.writeTo("build/publications/release/pom-default.xml")
            }
        }
    }
}*/
